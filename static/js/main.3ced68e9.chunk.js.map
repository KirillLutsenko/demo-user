{"version":3,"sources":["bus/weather/types.js","bus/weather/reducer.js","bus/client/activeDay/types.js","bus/client/activeDay/reducer.js","init/rootReducer.js","init/middleware.js","init/store.js","bus/weather/api/index.js","bus/weather/api/config.js","bus/weather/actions.js","bus/client/activeDay/actions.js","view/pages/Weather.js","bus/weather/index.js","bus/client/activeDay/index.js","index.js"],"names":["WEATHER_START_FETCHING","WEATHER_STOP_FETCHING","WEATHER_FILL","WEATHER_SET_FETCHING_ERROR","WEATHER_SET_MIN_TEMPERATURE","WEATHER_SET_MAX_TEMPERATURE","WEATHER_SET_TYPE_OF_WEATHER","WEATHER_SET_MINTEMPVALID_ERROR","WEATHER_SET_MAXTEMPVALID_ERROR","WEATHER_SET_STATUS_OF_FILTER","initialState","data","isFetching","error","weatherType","minTemperature","maxTemperature","minTempValidError","maxTempValidError","filterStatus","types","Object","freeze","WEATHER_SET_ACTIVE_DAY","activeId","rootReducer","combineReducers","weather","state","action","type","payload","weatherDayId","composeEnhancers","createLogger","duration","collapsed","colors","title","prevState","nextState","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","thunk","store","createStore","applyMiddleware","api","fetch","method","forecastActions","startFetching","stopFetching","fill","setFetchingError","fetchAsync","dispatch","a","response","status","json","setMinTemperature","setMaxTemperature","setTypeOfWeather","setMinTempValidationError","setMaxTempValidationError","setFilterStatus","weatherDayIdActions","setUserId","classNames","require","moment","Weather","useDispatch","useSelector","useEffect","filterWeather","filteredData","filter","day","temperature","minTemperatureChange","event","numberValidation","target","value","replace","maxTemperatureChange","setWeatherType","resetFilters","useForecast","dayId","useDayId","id","useWeatherDayId","className","length","onClick","getTemperature","htmlFor","name","onChange","checked","format","rain_probability","humidity","getHumidity","slice","map","obj","index","onKeyDown","tabIndex","role","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ced68e9.chunk.js","sourcesContent":["// fetching\nexport const WEATHER_START_FETCHING = 'WEATHER_START_FETCHING';\nexport const WEATHER_STOP_FETCHING = 'WEATHER_STOP_FETCHING';\nexport const WEATHER_FILL = 'WEATHER_FILL';\nexport const WEATHER_SET_FETCHING_ERROR = 'WEATHER_SET_FETCHING_ERROR';\n\n// async\nexport const WEATHER_FETCH_ASYNC = 'WEATHER_FETCH_ASYNC';\n\n// filtration\nexport const WEATHER_SET_MIN_TEMPERATURE = 'WEATHER_SET_MIN_TEMPERATURE';\nexport const WEATHER_SET_MAX_TEMPERATURE = 'WEATHER_SET_MAX_TEMPERATURE';\nexport const WEATHER_SET_TYPE_OF_WEATHER = 'WEATHER_SET_TYPE_OF_WEATHER';\nexport const WEATHER_SET_MINTEMPVALID_ERROR = 'WEATHER_SET_MINTEMPVALID_ERROR';\nexport const WEATHER_SET_MAXTEMPVALID_ERROR = 'WEATHER_SET_MAXTEMPVALID_ERROR';\nexport const WEATHER_SET_STATUS_OF_FILTER = 'WEATHER_SET_STATUS_OF_FILTER';\n","import {\n  WEATHER_START_FETCHING,\n  WEATHER_STOP_FETCHING,\n  WEATHER_FILL,\n  WEATHER_SET_FETCHING_ERROR,\n  WEATHER_SET_MIN_TEMPERATURE,\n  WEATHER_SET_MAX_TEMPERATURE,\n  WEATHER_SET_TYPE_OF_WEATHER,\n  WEATHER_SET_MINTEMPVALID_ERROR,\n  WEATHER_SET_MAXTEMPVALID_ERROR,\n  WEATHER_SET_STATUS_OF_FILTER,\n} from './types';\n\nconst initialState = {\n  data: null,\n  isFetching: false,\n  error: null,\n  weatherType: 'sunny',\n  minTemperature: '',\n  maxTemperature: '',\n  minTempValidError: false,\n  maxTempValidError: false,\n  filterStatus: false,\n};\n\nexport const forecastReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case WEATHER_START_FETCHING:\n      return {\n        ...state,\n        isFetching: true,\n      };\n\n    case WEATHER_STOP_FETCHING:\n      return {\n        ...state,\n        isFetching: false,\n      };\n\n    case WEATHER_SET_FETCHING_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        data: null,\n      };\n\n    case WEATHER_FILL:\n      return {\n        ...state,\n        data: action.payload,\n        error: null,\n      };\n\n    case WEATHER_SET_TYPE_OF_WEATHER:\n      return {\n        ...state,\n        weatherType: action.payload,\n      };\n\n    case WEATHER_SET_MIN_TEMPERATURE:\n      return {\n        ...state,\n        minTemperature: action.payload,\n      };\n\n    case WEATHER_SET_MAX_TEMPERATURE:\n      return {\n        ...state,\n        maxTemperature: action.payload,\n      };\n\n    case WEATHER_SET_MINTEMPVALID_ERROR:\n      return {\n        ...state,\n        minTempValidError: action.payload,\n      };\n\n    case WEATHER_SET_MAXTEMPVALID_ERROR:\n      return {\n        ...state,\n        maxTempValidError: action.payload,\n      };\n\n    case WEATHER_SET_STATUS_OF_FILTER:\n      return {\n        ...state,\n        filterStatus: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","export const types = Object.freeze({\n  WEATHER_SET_ACTIVE_DAY: 'WEATHER_SET_ACTIVE_DAY',\n});\n","import { types } from './types';\n\nconst initialState = {\n  activeId: 0,\n};\n\nexport const clientReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.WEATHER_SET_ACTIVE_DAY:\n      return {\n        activeId: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\n\n// делаем алиас чтобы в дальнейшем его использовать\nimport {\n  forecastReducer as weather,\n} from '../bus/weather/reducer';\n\nimport {\n  clientReducer as weatherDayId,\n} from '../bus/client/activeDay/reducer';\n\nexport const rootReducer = combineReducers({ // большой обьект состояния\n  weather,\n  weatherDayId,\n});\n","import { compose } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\n\n// функция которая вызывается и получает в себя обьект параметров\nexport const logger = createLogger({\n  duration: true,\n  collapsed: true,\n  colors: { // настройка нашего логгера\n    title: action => (action.error ? 'firebrick' : 'deepskyblue'),\n    prevState: () => '#1C5FAF',\n    action: () => '#149945',\n    nextState: () => '#A47104',\n    error: () => '#FF0005',\n  },\n});\n\n// проверка на то что это девелопмент окружение\n// (чтобы видить экшны только при разработке)\nconst developmentEnvironment = process.env.NODE_ENV === 'development';\n// расширения от гугл хром\nconst devtools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n// проверяем если у нас девелопмент режим и у нас есть дефтулз,\n// то мы будем использовать функцию обьеденения которую нам дает дефтулз\n// если нет то будем использовать compose который нам дает Redux\nconst composeEnhancers = developmentEnvironment\n  && devtools\n  ? devtools\n  : compose;\n// создаем массив всех middlewairs\n// добавляем его сразу в middleware так как он нам нуже всегда\nconst middleware = [thunk];\n\n// если у нас режим разработки добавляем в массив logger\nif (developmentEnvironment) {\n  middleware.push(logger);\n}\n\nexport { composeEnhancers, middleware };\n","// Core\nimport { createStore, applyMiddleware } from 'redux';\n\n// Tools\nimport { rootReducer } from './rootReducer';\nimport { composeEnhancers, middleware } from './middleware';\n\nexport const store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(...middleware)),\n);\n","import { weatherApi } from './config';\n\nexport const api = Object.freeze({\n  weather: {\n    fetch: () => fetch(`${weatherApi}/forecast`, {\n      method: 'GET',\n    }),\n  },\n});\n","export const weatherApi = 'https://lab.lectrum.io/rtx/api/';\n","import { api } from './api';\n\nimport {\n  WEATHER_START_FETCHING,\n  WEATHER_STOP_FETCHING,\n  WEATHER_FILL,\n  WEATHER_SET_FETCHING_ERROR,\n  WEATHER_SET_MIN_TEMPERATURE,\n  WEATHER_SET_MAX_TEMPERATURE,\n  WEATHER_SET_TYPE_OF_WEATHER,\n  WEATHER_SET_MAXTEMPVALID_ERROR,\n  WEATHER_SET_MINTEMPVALID_ERROR,\n  WEATHER_SET_STATUS_OF_FILTER,\n} from './types';\n\nexport const forecastActions = Object.freeze({\n  // fetch actions\n  startFetching: () => ({\n    type: WEATHER_START_FETCHING,\n  }),\n\n  stopFetching: () => ({\n    type: WEATHER_STOP_FETCHING,\n  }),\n\n  fill: payload => ({\n    type: WEATHER_FILL,\n    payload,\n  }),\n\n  setFetchingError: error => ({\n    type: WEATHER_SET_FETCHING_ERROR,\n    error: true,\n    payload: error,\n  }),\n\n  fetchAsync: () => async(dispatch) => {\n    dispatch(forecastActions.startFetching());\n\n    const response = await api.weather.fetch();\n\n    if (response.status === 200) {\n      const { data } = await response.json();\n\n      dispatch(forecastActions.fill(data));\n    } else {\n      const error = {\n        status: response.status,\n      };\n\n      dispatch(forecastActions.setFetchingError(error));\n    }\n\n    dispatch(forecastActions.stopFetching());\n  },\n\n  // filter actions\n  setMinTemperature: payload => ({\n    type: WEATHER_SET_MIN_TEMPERATURE,\n    payload,\n  }),\n\n  setMaxTemperature: payload => ({\n    type: WEATHER_SET_MAX_TEMPERATURE,\n    payload,\n  }),\n\n  setTypeOfWeather: payload => ({\n    type: WEATHER_SET_TYPE_OF_WEATHER,\n    payload,\n  }),\n\n  setMinTempValidationError: payload => ({\n    type: WEATHER_SET_MINTEMPVALID_ERROR,\n    payload,\n  }),\n\n  setMaxTempValidationError: payload => ({\n    type: WEATHER_SET_MAXTEMPVALID_ERROR,\n    payload,\n  }),\n\n  setFilterStatus: payload => ({\n    type: WEATHER_SET_STATUS_OF_FILTER,\n    payload,\n  }),\n});\n","import { types } from './types';\n\nexport const weatherDayIdActions = Object.freeze({\n  setUserId: payload => ({\n    type: types.WEATHER_SET_ACTIVE_DAY,\n    payload,\n  }),\n});\n","import React from 'react';\nimport { useForecast } from '../../bus/weather';\nimport { useWeatherDayId } from '../../bus/client/activeDay';\nimport './Weather.css';\n\nconst classNames = require('classnames');\n\nconst moment = require('moment');\n\nexport const Weather = () => {\n  const {\n    isFetching,\n    data,\n    error,\n    minTemperature,\n    maxTemperature,\n    weatherType,\n    minTempValidError,\n    maxTempValidError,\n    filterStatus,\n    filterWeather,\n    minTemperatureChange,\n    maxTemperatureChange,\n    setWeatherType,\n    resetFilters,\n  } = useForecast();\n\n  const { dayId, useDayId } = useWeatherDayId();\n\n  if (error && error.status === 404) {\n    return <p className=\"error\">Sorry, weather forecast is not found</p>;\n  }\n\n  if (error && error.status !== 404) {\n    return <p className=\"error\">Sorry, something went wrong</p>;\n  }\n\n  if (!isFetching && data && data.length === 0) {\n    return (\n      <div className=\"error\">\n        <p>By given criteria no days available</p>\n        <button\n          type=\"button\"\n          onClick={resetFilters}\n          className=\"reset-button\"\n        >\n          Reset filters\n        </button>\n      </div>\n    );\n  }\n\n  const getDayOfWeek = () => data\n    && data.length\n    && moment(data[dayId].day).format('dddd');\n\n  const getDate = () => data\n    && data.length\n    && moment(data[dayId].day).format('MMMM do');\n\n  const getTemperature = id => data\n    && data.length\n    && data[id].temperature;\n\n  const getRainProbability = id => data\n    && data.length\n    && data[id].rain_probability;\n\n  const getHumidity = id => data\n    && data.length\n    && data[id].humidity;\n\n  return (\n    <div className=\"weather-widget\">\n      {isFetching && (\n        <p className=\"error\">Loading data from api</p>\n      )}\n\n      <main>\n        <div className=\"filter\">\n          <label className=\"filter__label\" htmlFor=\"cloudy\">\n            <span\n              className={classNames(\n                'checkbox', {\n                  'checkbox checkbox-selected': weatherType === 'cloudy',\n                },\n              )}\n            >\n              Cloudy\n            </span>\n            <input\n              type=\"radio\"\n              id=\"cloudy\"\n              name=\"filter\"\n              className=\"radio-checkbox\"\n              onChange={() => setWeatherType('cloudy')}\n              checked={weatherType === 'cloudy'}\n            />\n          </label>\n          <label className=\"filter__label\" htmlFor=\"sunny\">\n            <span className={classNames(\n              'checkbox', {\n                'checkbox checkbox-selected': weatherType === 'sunny',\n              },\n            )}\n            >\n              Sunny\n            </span>\n            <input\n              type=\"radio\"\n              id=\"sunny\"\n              name=\"filter\"\n              className=\"radio-checkbox\"\n              onChange={() => setWeatherType('sunny')}\n              checked={weatherType === 'sunny'}\n            />\n          </label>\n          <label className=\"filter__label\" htmlFor=\"rainy\">\n            <span\n              className={classNames(\n                'checkbox', {\n                  'checkbox checkbox-selected': weatherType === 'rainy',\n                },\n              )}\n            >\n              Rainy\n            </span>\n            <input\n              type=\"radio\"\n              id=\"rainy\"\n              name=\"filter\"\n              className=\"radio-checkbox\"\n              onChange={() => setWeatherType('rainy')}\n              checked={weatherType === 'rainy'}\n            />\n          </label>\n          <div className=\"custom-input\">\n            <label htmlFor=\"min-temperature\">Minimum temperature</label>\n            <input\n              id=\"min-temperature\"\n              type=\"text\"\n              value={minTemperature}\n              onChange={minTemperatureChange}\n            />\n            {minTempValidError && (\n              <p className=\"validation-error\">\n                Enter temperature\n              </p>\n            )}\n          </div>\n          <div className=\"custom-input\">\n            <label htmlFor=\"min-temperature\">Maximum temperature</label>\n            <input\n              id=\"max-temperature\"\n              type=\"text\"\n              value={maxTemperature}\n              onChange={maxTemperatureChange}\n            />\n            {maxTempValidError && (\n              <p className=\"validation-error\">\n                Enter temperature\n              </p>\n            )}\n          </div>\n          {!filterStatus ? (\n            <button\n              type=\"button\"\n              onClick={filterWeather}\n              className=\"button\"\n            >\n              Filter\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              onClick={resetFilters}\n              className=\"button\"\n            >\n              Reset filters\n            </button>\n          )}\n        </div>\n        <div className=\"head\">\n          <div\n            className={data\n              && data.length\n              && classNames(\n                'icon', {\n                  'icon sunny': data[dayId].type === 'sunny',\n                  'icon cloudy': data[dayId].type === 'cloudy',\n                  'icon rainy': data[dayId].type === 'rainy',\n                },\n              )\n              }\n          />\n          <div className=\"current-date\">\n            <p>\n              {!isFetching && getDayOfWeek()}\n            </p>\n            <span>\n              {!isFetching && getDate()\n              }\n            </span>\n          </div>\n        </div>\n        <div className=\"current-weather\">\n          <p className=\"temperature\">\n            {!isFetching && getTemperature(dayId)\n            }\n          </p>\n          <p className=\"meta\">\n            <span className=\"rainy\">\n              {`%${!isFetching && getRainProbability(dayId)}`}\n            </span>\n            <span className=\"humidity\">\n              {`%${!isFetching && getHumidity(dayId)}`}\n            </span>\n          </p>\n        </div>\n        <div className=\"forecast\">\n          {!isFetching\n            && data\n            && data.length\n            && data\n              .slice(0, 7)\n              .map((obj, index) => (\n                // eslint-disable-next-line\n                <div\n                  key={obj.id}\n                  onClick={() => useDayId(index)}\n                  onKeyDown={() => useDayId(index)}\n                  tabIndex={0}\n                  role=\"button\"\n                  className={classNames(\n                    'day', {\n                      'day selected': index === dayId,\n                      'day sunny': obj.type === 'sunny',\n                      'day cloudy': obj.type === 'cloudy',\n                      'day rainy': obj.type === 'rainy',\n                    },\n                  )\n                  }\n                >\n                  <p>\n                    {moment(obj.day).format('dddd')}\n                  </p>\n                  <span>\n                    {getTemperature(index)}\n                  </span>\n                </div>\n              ))}\n        </div>\n      </main>\n    </div>\n  );\n};\n","// core\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// actions\nimport { forecastActions } from './actions';\n\n// types & reducers\nexport * from './types';\nexport * from './reducer';\n\nexport const useForecast = () => {\n  const dispatch = useDispatch();\n  const {\n    data,\n    isFetching,\n    error,\n    minTemperature,\n    maxTemperature,\n    weatherType,\n    minTempValidError,\n    maxTempValidError,\n    filterStatus,\n  } = useSelector(state => state.weather);\n\n  useEffect(() => {\n    dispatch(forecastActions.fetchAsync());\n  }, [dispatch]);\n\n  const minTemperatureChange = (event) => {\n    const { value } = event.target;\n    const numberValidation = value.replace(/[^\\d.]/g, '');\n\n    dispatch(forecastActions.setMinTempValidationError(false));\n    dispatch(forecastActions.setMinTemperature(numberValidation));\n  };\n\n  const maxTemperatureChange = (event) => {\n    const { value } = event.target;\n    const numberValidation = value.replace(/[^\\d.]/g, '');\n\n    dispatch(forecastActions.setMaxTempValidationError(false));\n    dispatch(forecastActions.setMaxTemperature(numberValidation));\n  };\n\n  const setWeatherType = type => dispatch(\n    forecastActions.setTypeOfWeather(type),\n  );\n\n  const filterWeather = async() => {\n    if (minTemperature === '' && maxTemperature === '') {\n      dispatch(forecastActions.setMinTempValidationError(true));\n      dispatch(forecastActions.setMaxTempValidationError(true));\n    } else if (minTemperature === '') {\n      dispatch(forecastActions.setMinTempValidationError(true));\n    } else if (maxTemperature === '') {\n      dispatch(forecastActions.setMaxTempValidationError(true));\n    } else {\n      await dispatch(forecastActions.fetchAsync());\n\n      const filteredData = data.filter(day => day.type === weatherType\n        && day.temperature >= minTemperature\n        && day.temperature <= maxTemperature);\n\n      dispatch(forecastActions.fill(filteredData));\n      dispatch(forecastActions.setFilterStatus(true));\n    }\n  };\n\n  const resetFilters = () => {\n    dispatch(forecastActions.fetchAsync());\n\n    dispatch(forecastActions.setMinTemperature(''));\n    dispatch(forecastActions.setMaxTemperature(''));\n    dispatch(forecastActions.setTypeOfWeather('sunny'));\n\n    dispatch(forecastActions.setFilterStatus(false));\n  };\n\n  return {\n    data,\n    isFetching,\n    error,\n    minTemperature,\n    maxTemperature,\n    weatherType,\n    minTempValidError,\n    maxTempValidError,\n    filterStatus,\n    minTemperatureChange,\n    maxTemperatureChange,\n    setWeatherType,\n    filterWeather,\n    resetFilters,\n  };\n};\n","// core\nimport { useDispatch, useSelector } from 'react-redux';\n\n// actions\nimport { weatherDayIdActions } from './actions';\n\n// types & reducers\nexport * from './types';\nexport * from './reducer';\n\nexport const useWeatherDayId = () => {\n  const dispatch = useDispatch();\n  const useDayId = id => dispatch(weatherDayIdActions.setUserId(id));\n\n  const dayId = useSelector(state => state.weatherDayId.activeId);\n\n  return {\n    dayId,\n    useDayId,\n  };\n};\n","// Core\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider as ReduxProvider } from 'react-redux';\n\n// Init\nimport { store } from './init/store';\n\n// App\nimport { Weather } from './view/pages/Weather';\n\nReactDOM.render(\n  <ReduxProvider store={store}>\n    <Weather />\n  </ReduxProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}