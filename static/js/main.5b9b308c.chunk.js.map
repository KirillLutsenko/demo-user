{"version":3,"sources":["bus/weather/types.js","bus/weather/reducer.js","bus/client/activeDay/types.js","bus/client/activeDay/reducer.js","init/rootReducer.js","init/middleware.js","init/store.js","bus/weather/api/index.js","bus/weather/api/config.js","bus/weather/actions.js","bus/weather/index.js","view/pages/FilterBlock/TemperatureInputs/TemperatureInputs.js","view/pages/FilterBlock/TypeOfWeather.js/TypeOfWeather.js","view/pages/FilterBlock/FilterBlock.js","bus/client/activeDay/actions.js","bus/client/activeDay/index.js","view/pages/HeadBlock/HeadBlock.js","view/pages/CurrentWeather/CurrentWeather.js","view/pages/Forecast/Forecast.js","view/pages/Weather.js","index.js"],"names":["WEATHER_START_FETCHING","WEATHER_STOP_FETCHING","WEATHER_FILL","WEATHER_SET_FETCHING_ERROR","WEATHER_SET_MIN_TEMPERATURE","WEATHER_SET_MAX_TEMPERATURE","WEATHER_SET_TYPE_OF_WEATHER","WEATHER_SET_MINTEMPVALID_ERROR","WEATHER_SET_MAXTEMPVALID_ERROR","WEATHER_SET_STATUS_OF_FILTER","initialState","data","isFetching","error","weatherType","minTemperature","maxTemperature","minTempValidError","maxTempValidError","filterStatus","types","Object","freeze","WEATHER_SET_ACTIVE_DAY","activeId","rootReducer","combineReducers","weather","state","action","type","payload","weatherDayId","composeEnhancers","createLogger","duration","collapsed","colors","title","prevState","nextState","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","thunk","store","createStore","applyMiddleware","api","fetch","method","forecastActions","startFetching","stopFetching","fill","setFetchingError","fetchAsync","dispatch","a","response","status","json","setMinTemperature","setMaxTemperature","setTypeOfWeather","setMinTempValidationError","setMaxTempValidationError","setFilterStatus","useForecast","useDispatch","useSelector","useEffect","filterWeather","filteredData","filter","day","temperature","minTemperatureChange","event","numberValidation","target","value","replace","maxTemperatureChange","setWeatherType","resetFilters","TemperatureInputs","className","htmlFor","id","maxLength","onChange","onClick","classNames","require","TypeOfWeather","name","checked","FilterBlock","weatherDayIdActions","setUserId","useWeatherDayId","dayId","useDayId","moment","HeadBlock","length","format","CurrentWeather","getTemperature","rain_probability","humidity","getHumidity","Forecast","slice","map","obj","index","onKeyDown","tabIndex","role","Weather","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5b9b308c.chunk.js","sourcesContent":["// fetching\nexport const WEATHER_START_FETCHING = 'WEATHER_START_FETCHING';\nexport const WEATHER_STOP_FETCHING = 'WEATHER_STOP_FETCHING';\nexport const WEATHER_FILL = 'WEATHER_FILL';\nexport const WEATHER_SET_FETCHING_ERROR = 'WEATHER_SET_FETCHING_ERROR';\n\n// async\nexport const WEATHER_FETCH_ASYNC = 'WEATHER_FETCH_ASYNC';\n\n// filtration\nexport const WEATHER_SET_MIN_TEMPERATURE = 'WEATHER_SET_MIN_TEMPERATURE';\nexport const WEATHER_SET_MAX_TEMPERATURE = 'WEATHER_SET_MAX_TEMPERATURE';\nexport const WEATHER_SET_TYPE_OF_WEATHER = 'WEATHER_SET_TYPE_OF_WEATHER';\nexport const WEATHER_SET_MINTEMPVALID_ERROR = 'WEATHER_SET_MINTEMPVALID_ERROR';\nexport const WEATHER_SET_MAXTEMPVALID_ERROR = 'WEATHER_SET_MAXTEMPVALID_ERROR';\nexport const WEATHER_SET_STATUS_OF_FILTER = 'WEATHER_SET_STATUS_OF_FILTER';\n","import {\n  WEATHER_START_FETCHING,\n  WEATHER_STOP_FETCHING,\n  WEATHER_FILL,\n  WEATHER_SET_FETCHING_ERROR,\n  WEATHER_SET_MIN_TEMPERATURE,\n  WEATHER_SET_MAX_TEMPERATURE,\n  WEATHER_SET_TYPE_OF_WEATHER,\n  WEATHER_SET_MINTEMPVALID_ERROR,\n  WEATHER_SET_MAXTEMPVALID_ERROR,\n  WEATHER_SET_STATUS_OF_FILTER,\n} from './types';\n\nconst initialState = {\n  data: null,\n  isFetching: false,\n  error: null,\n  weatherType: 'sunny',\n  minTemperature: '',\n  maxTemperature: '',\n  minTempValidError: false,\n  maxTempValidError: false,\n  filterStatus: false,\n};\n\nexport const forecastReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case WEATHER_START_FETCHING:\n      return {\n        ...state,\n        isFetching: true,\n      };\n\n    case WEATHER_STOP_FETCHING:\n      return {\n        ...state,\n        isFetching: false,\n      };\n\n    case WEATHER_SET_FETCHING_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        data: null,\n      };\n\n    case WEATHER_FILL:\n      return {\n        ...state,\n        data: action.payload,\n        error: null,\n      };\n\n    case WEATHER_SET_TYPE_OF_WEATHER:\n      return {\n        ...state,\n        weatherType: action.payload,\n      };\n\n    case WEATHER_SET_MIN_TEMPERATURE:\n      return {\n        ...state,\n        minTemperature: action.payload,\n      };\n\n    case WEATHER_SET_MAX_TEMPERATURE:\n      return {\n        ...state,\n        maxTemperature: action.payload,\n      };\n\n    case WEATHER_SET_MINTEMPVALID_ERROR:\n      return {\n        ...state,\n        minTempValidError: action.payload,\n      };\n\n    case WEATHER_SET_MAXTEMPVALID_ERROR:\n      return {\n        ...state,\n        maxTempValidError: action.payload,\n      };\n\n    case WEATHER_SET_STATUS_OF_FILTER:\n      return {\n        ...state,\n        filterStatus: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","export const types = Object.freeze({\n  WEATHER_SET_ACTIVE_DAY: 'WEATHER_SET_ACTIVE_DAY',\n});\n","import { types } from './types';\n\nconst initialState = {\n  activeId: 0,\n};\n\nexport const clientReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.WEATHER_SET_ACTIVE_DAY:\n      return {\n        activeId: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\n\n// делаем алиас чтобы в дальнейшем его использовать\nimport {\n  forecastReducer as weather,\n} from '../bus/weather/reducer';\n\nimport {\n  clientReducer as weatherDayId,\n} from '../bus/client/activeDay/reducer';\n\nexport const rootReducer = combineReducers({ // большой обьект состояния\n  weather,\n  weatherDayId,\n});\n","import { compose } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\n\n// функция которая вызывается и получает в себя обьект параметров\nexport const logger = createLogger({\n  duration: true,\n  collapsed: true,\n  colors: { // настройка нашего логгера\n    title: action => (action.error ? 'firebrick' : 'deepskyblue'),\n    prevState: () => '#1C5FAF',\n    action: () => '#149945',\n    nextState: () => '#A47104',\n    error: () => '#FF0005',\n  },\n});\n\n// проверка на то что это девелопмент окружение\n// (чтобы видить экшны только при разработке)\nconst developmentEnvironment = process.env.NODE_ENV === 'development';\n// расширения от гугл хром\nconst devtools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n// проверяем если у нас девелопмент режим и у нас есть дефтулз,\n// то мы будем использовать функцию обьеденения которую нам дает дефтулз\n// если нет то будем использовать compose который нам дает Redux\nconst composeEnhancers = developmentEnvironment\n  && devtools\n  ? devtools\n  : compose;\n// создаем массив всех middlewairs\n// добавляем его сразу в middleware так как он нам нуже всегда\nconst middleware = [thunk];\n\n// если у нас режим разработки добавляем в массив logger\nif (developmentEnvironment) {\n  middleware.push(logger);\n}\n\nexport { composeEnhancers, middleware };\n","// Core\nimport { createStore, applyMiddleware } from 'redux';\n\n// Tools\nimport { rootReducer } from './rootReducer';\nimport { composeEnhancers, middleware } from './middleware';\n\nexport const store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(...middleware)),\n);\n","import { weatherApi } from './config';\n\nexport const api = Object.freeze({\n  weather: {\n    fetch: () => fetch(`${weatherApi}/forecast`, {\n      method: 'GET',\n    }),\n  },\n});\n","export const weatherApi = 'https://lab.lectrum.io/rtx/api/';\n","import { api } from './api';\n\nimport {\n  WEATHER_START_FETCHING,\n  WEATHER_STOP_FETCHING,\n  WEATHER_FILL,\n  WEATHER_SET_FETCHING_ERROR,\n  WEATHER_SET_MIN_TEMPERATURE,\n  WEATHER_SET_MAX_TEMPERATURE,\n  WEATHER_SET_TYPE_OF_WEATHER,\n  WEATHER_SET_MAXTEMPVALID_ERROR,\n  WEATHER_SET_MINTEMPVALID_ERROR,\n  WEATHER_SET_STATUS_OF_FILTER,\n} from './types';\n\nexport const forecastActions = Object.freeze({\n  // fetch actions\n  startFetching: () => ({\n    type: WEATHER_START_FETCHING,\n  }),\n\n  stopFetching: () => ({\n    type: WEATHER_STOP_FETCHING,\n  }),\n\n  fill: payload => ({\n    type: WEATHER_FILL,\n    payload,\n  }),\n\n  setFetchingError: error => ({\n    type: WEATHER_SET_FETCHING_ERROR,\n    error: true,\n    payload: error,\n  }),\n\n  fetchAsync: () => async(dispatch) => {\n    dispatch(forecastActions.startFetching());\n\n    const response = await api.weather.fetch();\n\n    if (response.status === 200) {\n      const { data } = await response.json();\n\n      dispatch(forecastActions.fill(data));\n    } else {\n      const error = {\n        status: response.status,\n      };\n\n      dispatch(forecastActions.setFetchingError(error));\n    }\n\n    dispatch(forecastActions.stopFetching());\n  },\n\n  // filter actions\n  setMinTemperature: payload => ({\n    type: WEATHER_SET_MIN_TEMPERATURE,\n    payload,\n  }),\n\n  setMaxTemperature: payload => ({\n    type: WEATHER_SET_MAX_TEMPERATURE,\n    payload,\n  }),\n\n  setTypeOfWeather: payload => ({\n    type: WEATHER_SET_TYPE_OF_WEATHER,\n    payload,\n  }),\n\n  setMinTempValidationError: payload => ({\n    type: WEATHER_SET_MINTEMPVALID_ERROR,\n    payload,\n  }),\n\n  setMaxTempValidationError: payload => ({\n    type: WEATHER_SET_MAXTEMPVALID_ERROR,\n    payload,\n  }),\n\n  setFilterStatus: payload => ({\n    type: WEATHER_SET_STATUS_OF_FILTER,\n    payload,\n  }),\n});\n","// core\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// actions\nimport { forecastActions } from './actions';\n\n// types & reducers\nexport * from './types';\nexport * from './reducer';\n\nexport const useForecast = () => {\n  const dispatch = useDispatch();\n  const {\n    data,\n    isFetching,\n    error,\n    minTemperature,\n    maxTemperature,\n    weatherType,\n    minTempValidError,\n    maxTempValidError,\n    filterStatus,\n  } = useSelector(state => state.weather);\n\n  useEffect(() => {\n    dispatch(forecastActions.fetchAsync());\n  }, [dispatch]);\n\n  const minTemperatureChange = (event) => {\n    const { value } = event.target;\n    const numberValidation = value.replace(/[^\\d.]/g, '');\n\n    dispatch(forecastActions.setMinTempValidationError(false));\n    dispatch(forecastActions.setMinTemperature(numberValidation));\n  };\n\n  const maxTemperatureChange = (event) => {\n    const { value } = event.target;\n    const numberValidation = value.replace(/[^\\d.]/g, '');\n\n    dispatch(forecastActions.setMaxTempValidationError(false));\n    dispatch(forecastActions.setMaxTemperature(numberValidation));\n  };\n\n  const setWeatherType = type => dispatch(\n    forecastActions.setTypeOfWeather(type),\n  );\n\n  const filterWeather = async() => {\n    if (minTemperature === '' && maxTemperature === '') {\n      dispatch(forecastActions.setMinTempValidationError(true));\n      dispatch(forecastActions.setMaxTempValidationError(true));\n    } else if (minTemperature === '') {\n      dispatch(forecastActions.setMinTempValidationError(true));\n    } else if (maxTemperature === '') {\n      dispatch(forecastActions.setMaxTempValidationError(true));\n    } else {\n      await dispatch(forecastActions.fetchAsync());\n\n      const filteredData = data.filter(day => day.type === weatherType\n        && day.temperature >= minTemperature\n        && day.temperature <= maxTemperature);\n\n      dispatch(forecastActions.fill(filteredData));\n      dispatch(forecastActions.setFilterStatus(true));\n    }\n  };\n\n  const resetFilters = () => {\n    dispatch(forecastActions.fetchAsync());\n\n    dispatch(forecastActions.setMinTemperature(''));\n    dispatch(forecastActions.setMaxTemperature(''));\n    dispatch(forecastActions.setTypeOfWeather('sunny'));\n\n    dispatch(forecastActions.setFilterStatus(false));\n  };\n\n  return {\n    data,\n    isFetching,\n    error,\n    minTemperature,\n    maxTemperature,\n    weatherType,\n    minTempValidError,\n    maxTempValidError,\n    filterStatus,\n    minTemperatureChange,\n    maxTemperatureChange,\n    setWeatherType,\n    filterWeather,\n    resetFilters,\n  };\n};\n","import React from 'react';\nimport { useForecast } from '../../../../bus/weather';\nimport './TemperatureInputs.css';\n\nexport const TemperatureInputs = () => {\n  const {\n    minTemperature,\n    maxTemperature,\n    minTempValidError,\n    maxTempValidError,\n    filterStatus,\n    filterWeather,\n    minTemperatureChange,\n    maxTemperatureChange,\n    resetFilters,\n  } = useForecast();\n\n  return (\n    <div className=\"filter-inputs\">\n      <div className=\"custom-input\">\n        <label htmlFor=\"min-temperature\">Minimum temperature</label>\n        <input\n          id=\"min-temperature\"\n          type=\"text\"\n          maxLength=\"2\"\n          value={minTemperature}\n          onChange={minTemperatureChange}\n        />\n        {minTempValidError && (\n          <p className=\"validation-error\">\n            Enter temperature\n          </p>\n        )}\n      </div>\n      <div className=\"custom-input\">\n        <label htmlFor=\"min-temperature\">Maximum temperature</label>\n        <input\n          id=\"max-temperature\"\n          type=\"text\"\n          maxLength=\"2\"\n          value={maxTemperature}\n          onChange={maxTemperatureChange}\n        />\n        {maxTempValidError && (\n          <p className=\"validation-error\">\n            Enter temperature\n          </p>\n        )}\n      </div>\n      {!filterStatus ? (\n        <button\n          type=\"button\"\n          onClick={filterWeather}\n          className=\"button\"\n        >\n          Filter\n        </button>\n      ) : (\n        <button\n          type=\"button\"\n          onClick={resetFilters}\n          className=\"button\"\n        >\n          Reset filters\n        </button>\n      )}\n    </div>\n  );\n};\n","// Core\nimport React from 'react';\n\n// Hooks\nimport { useForecast } from '../../../../bus/weather';\n\n// Styles\nimport './TypeOfWeather.css';\n\nconst classNames = require('classnames');\n\nexport const TypeOfWeather = () => {\n  const { weatherType, setWeatherType } = useForecast();\n\n  return (\n    <div className=\"filter-labels\">\n      <label className=\"filter__label\" htmlFor=\"cloudy\">\n        <span\n          className={classNames(\n            'checkbox', {\n              'checkbox checkbox-selected': weatherType === 'cloudy',\n            },\n          )}\n        >\n          Cloudy\n        </span>\n        <input\n          type=\"radio\"\n          id=\"cloudy\"\n          name=\"filter\"\n          className=\"radio-checkbox\"\n          onChange={() => setWeatherType('cloudy')}\n          checked={weatherType === 'cloudy'}\n        />\n      </label>\n      <label className=\"filter__label\" htmlFor=\"sunny\">\n        <span className={classNames(\n          'checkbox', {\n            'checkbox checkbox-selected': weatherType === 'sunny',\n          },\n        )}\n        >\n          Sunny\n        </span>\n        <input\n          type=\"radio\"\n          id=\"sunny\"\n          name=\"filter\"\n          className=\"radio-checkbox\"\n          onChange={() => setWeatherType('sunny')}\n          checked={weatherType === 'sunny'}\n        />\n      </label>\n      <label className=\"filter__label\" htmlFor=\"rainy\">\n        <span\n          className={classNames(\n            'checkbox', {\n              'checkbox checkbox-selected': weatherType === 'rainy',\n            },\n          )}\n        >\n          Rainy\n        </span>\n        <input\n          type=\"radio\"\n          id=\"rainy\"\n          name=\"filter\"\n          className=\"radio-checkbox\"\n          onChange={() => setWeatherType('rainy')}\n          checked={weatherType === 'rainy'}\n        />\n      </label>\n    </div>\n  );\n};\n","import React from 'react';\nimport './FilterBlock.css';\nimport { TemperatureInputs } from './TemperatureInputs';\nimport { TypeOfWeather } from './TypeOfWeather.js/TypeOfWeather';\n\nexport const FilterBlock = () => (\n  <div className=\"filter\">\n    <TypeOfWeather />\n    <TemperatureInputs />\n  </div>\n);\n","import { types } from './types';\n\nexport const weatherDayIdActions = Object.freeze({\n  setUserId: payload => ({\n    type: types.WEATHER_SET_ACTIVE_DAY,\n    payload,\n  }),\n});\n","// core\nimport { useDispatch, useSelector } from 'react-redux';\n\n// actions\nimport { weatherDayIdActions } from './actions';\n\n// types & reducers\nexport * from './types';\nexport * from './reducer';\n\nexport const useWeatherDayId = () => {\n  const dispatch = useDispatch();\n  const useDayId = id => dispatch(weatherDayIdActions.setUserId(id));\n\n  const dayId = useSelector(state => state.weatherDayId.activeId);\n\n  return {\n    dayId,\n    useDayId,\n  };\n};\n","import React from 'react';\nimport { useForecast } from '../../../bus/weather';\nimport { useWeatherDayId } from '../../../bus/client/activeDay';\n\nimport './HeadBlock.css';\n\nconst classNames = require('classnames');\n\nconst moment = require('moment');\n\nexport const HeadBlock = () => {\n  const { data, isFetching } = useForecast();\n  const { dayId } = useWeatherDayId();\n\n  const getDayOfWeek = () => data\n    && data.length\n    && moment(data[dayId].day).format('dddd');\n\n  const getDate = () => data\n    && data.length\n    && moment(data[dayId].day).format('MMMM do');\n\n  return (\n    <div className=\"head\">\n      <div\n        className={data\n          && data.length\n          && classNames(\n            'icon', {\n              'icon sunny': data[dayId].type === 'sunny',\n              'icon cloudy': data[dayId].type === 'cloudy',\n              'icon rainy': data[dayId].type === 'rainy',\n            },\n          )\n          }\n      />\n      <div className=\"current-date\">\n        <p>\n          {!isFetching && getDayOfWeek()}\n        </p>\n        <span>\n          {!isFetching && getDate()\n          }\n        </span>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useForecast } from '../../../bus/weather';\nimport { useWeatherDayId } from '../../../bus/client/activeDay';\nimport './CurrentWeather.css';\n\nexport const CurrentWeather = ({ getTemperature }) => {\n  const { data, isFetching } = useForecast();\n  const { dayId } = useWeatherDayId();\n\n  const getRainProbability = id => data\n    && data.length\n    && data[id].rain_probability;\n\n  const getHumidity = id => data\n    && data.length\n    && data[id].humidity;\n\n  return (\n    <div className=\"current-weather\">\n      <p className=\"temperature\">\n        {!isFetching && getTemperature(dayId)\n        }\n      </p>\n      <p className=\"meta\">\n        <span className=\"rainy\">\n          {`%${!isFetching && getRainProbability(dayId)}`}\n        </span>\n        <span className=\"humidity\">\n          {`%${!isFetching && getHumidity(dayId)}`}\n        </span>\n      </p>\n    </div>\n  );\n};\n\nCurrentWeather.propTypes = {\n  getTemperature: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useWeatherDayId } from '../../../bus/client';\nimport { useForecast } from '../../../bus/weather';\nimport './Forecast.css';\n\nconst classNames = require('classnames');\nconst moment = require('moment');\n\nexport const Forecast = ({ getTemperature }) => {\n  const { dayId, useDayId } = useWeatherDayId();\n  const { isFetching, data } = useForecast();\n\n  return (\n    <div className=\"forecast\">\n      {!isFetching\n        && data\n        && data.length\n        && data\n          .slice(0, 7)\n          .map((obj, index) => (\n            <div\n              key={obj.id}\n              onClick={() => useDayId(index)}\n              onKeyDown={() => useDayId(index)}\n              tabIndex={0}\n              role=\"button\"\n              className={classNames(\n                'day', {\n                  'day selected': index === dayId,\n                  'day sunny': obj.type === 'sunny',\n                  'day cloudy': obj.type === 'cloudy',\n                  'day rainy': obj.type === 'rainy',\n                },\n              )\n              }\n            >\n              <p>\n                {moment(obj.day).format('dddd')}\n              </p>\n              <span>\n                {getTemperature(index)}\n              </span>\n            </div>\n          ))}\n    </div>\n  );\n};\n\nForecast.propTypes = {\n  getTemperature: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { useForecast } from '../../bus/weather';\nimport { FilterBlock } from './FilterBlock';\nimport { HeadBlock } from './HeadBlock/HeadBlock';\nimport { CurrentWeather } from './CurrentWeather/CurrentWeather';\nimport { Forecast } from './Forecast/Forecast';\nimport './Weather.css';\n\nexport const Weather = () => {\n  const {\n    isFetching,\n    data,\n    error,\n    resetFilters,\n  } = useForecast();\n\n  if (error && error.status === 404) {\n    return <p className=\"error\">Sorry, weather forecast is not found</p>;\n  }\n\n  if (error && error.status !== 404) {\n    return <p className=\"error\">Sorry, something went wrong</p>;\n  }\n\n  if (!isFetching && data && data.length === 0) {\n    return (\n      <div className=\"error\">\n        <p>By given criteria no days available</p>\n        <button\n          type=\"button\"\n          onClick={resetFilters}\n          className=\"reset-button\"\n        >\n          Reset filters\n        </button>\n      </div>\n    );\n  }\n\n  const getTemperature = id => data\n    && data.length\n    && data[id].temperature;\n\n  return (\n    <div className=\"weather-widget\">\n      {isFetching && (\n        <p className=\"error\">Loading data from api</p>\n      )}\n\n      <main>\n        <FilterBlock />\n        <HeadBlock />\n        <CurrentWeather getTemperature={getTemperature} />\n        <Forecast getTemperature={getTemperature} />\n      </main>\n    </div>\n  );\n};\n","// Core\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider as ReduxProvider } from 'react-redux';\n\n// Init\nimport { store } from './init/store';\n\n// App\nimport { Weather } from './view/pages/Weather';\n\nReactDOM.render(\n  <ReduxProvider store={store}>\n    <Weather />\n  </ReduxProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}